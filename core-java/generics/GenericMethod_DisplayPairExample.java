// ==============================================================================
//  Organization : TINITIATE TECHNOLOGIES PVT LTD
//  Website      : tinitiate.com
//  Script Title : Java Tutorial
//  Description  : Generic Methods with Multiple Type Parameters  
//  Author       : Team Tinitiate
// ==============================================================================


// File: GenericMethod_DisplayPairExample.java
// üß† Topic: Generic Methods with Multiple Type Parameters
// Demonstrates a generic method that prints a pair of values of any types.

public class GenericMethod_DisplayPairExample {

    // ‚¨áÔ∏è This is a generic method definition.
    // <K, V> are "type parameters" that allow this method to work with ANY types.
    // Example: K could be String, V could be Integer ‚Äî or vice versa.
    public static <K, V> void displayPair(K key, V value) {
        // Prints the key and value together
        System.out.println("Key: " + key + " | Value: " + value);
    }

    public static void main(String[] args) {
        // Here we call the generic method with different type combinations.

        // String - String pair
        displayPair("Course", "Java Full Stack");

        // String - Integer pair
        displayPair("Duration (months)", 6);

        // Integer - String pair
        displayPair(101, "Student ID");
    }
}

/*
üßæ Explanation:
1Ô∏è‚É£ <K, V> in the method signature declares two generic types.
2Ô∏è‚É£ The method can accept any combination of data types for those placeholders.
3Ô∏è‚É£ During each call, Java automatically infers the actual types from arguments.
   - For displayPair("Course", "Java Full Stack"), K = String, V = String
   - For displayPair("Duration (months)", 6), K = String, V = Integer
   - For displayPair(101, "Student ID"), K = Integer, V = String
4Ô∏è‚É£ The benefit: One method works for all data types ‚Äî no need for overloads.

‚úÖ Expected Output:
Key: Course | Value: Java Full Stack
Key: Duration (months) | Value: 6
Key: 101 | Value: Student ID
*/
